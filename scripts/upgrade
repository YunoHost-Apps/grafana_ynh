#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=4

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
  ynh_legacy_permissions_delete_all

  ynh_app_setting_delete --app=$app --key=is_public
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=12

# Migration: remove old repository if defined
if [ -f "/etc/apt/sources.list.d/grafana_stable.list" ] ; then
	ynh_secure_remove --file="/etc/apt/sources.list.d/grafana_stable.list"
fi

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# DOWNLOAD  AND INSTALL UPDATED GRAFANA DEB PACKAGE
#=================================================
ynh_script_progression --message="Downloading Grafana..." --weight=11

temp_folder="$(mktemp -d)"

grafana_deb_dst="$temp_folder/grafana_deb.deb"

if [ -n "$(uname -m | grep armv6)" ]
then
    grafana_deb_url="$url_armv6"
else
    grafana_deb_url="$url"
fi

ynh_exec_quiet "wget -q -O $grafana_deb_dst $grafana_deb_url"
echo "$sha256sum  $grafana_deb_dst" | sha256sum -c -

ynh_script_progression --message="Installing Grafana..." --weight=11
    DEBIAN_FRONTEND=noninteractive ynh_exec_warn_less dpkg --force-confold -i $grafana_deb_dst

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CONFIGURING GRAFANA AND INFLUXDB
#=================================================
ynh_script_progression --message="Configuring Grafana and InfluxDB..." --weight=3

# If NetData is installed, configure it to feed InfluxDB
if [ -d "/opt/netdata" ] ; then
  netdata_conf="/opt/netdata/etc/netdata/exporting.conf"
  if [ ! -f $netdata_conf ] ; then
    cp /opt/netdata/usr/lib/netdata/conf.d/exporting.conf $netdata_conf
  fi
  sed -i '/^\[exporting:global\]$/,/^\[/ {
        s/enabled = no/enabled = yes/
        s/# update every = 10/update every = 60/
      }' $netdata_conf
  if [ -z "$(grep "yunohost" $netdata_conf)" ] ; then
      cat >> $netdata_conf <<EOF
[opentsdb:yunohost]
    enabled = yes
    destination = localhost:4242
    # data source = average
    # prefix = netdata
    # hostname = my_hostname
    update every = 60
    # buffer on failures = 10
    # timeout ms = 20000
    # send names instead of ids = yes
    # send charts matching = *
    # send hosts matching = localhost *
EOF
  fi

  # Remove obsolete NetData backend if in use
  netdata_conf="/opt/netdata/etc/netdata/netdata.conf"
  if [ -f "$netdata_conf" ] ; then
    # If there is already a [backend] section
    if [ -n "$(cat $netdata_conf | grep '\[backend\]')" ] ; then
      # These regexps replaces patterns inside ini [sections] ([backend] section, here)
      sed -i '/^\[backend\]$/,/^\[/ {
        s/enabled = yes/enabled = no/
      }' $netdata_conf
    else
      # Otherwise create the section
      echo "[backend]
  enabled = yes
  type = opentsdb
  destination = localhost:4242" | tee -a $netdata_conf
    fi
  fi
    # Restart NetData
    ynh_systemd_action --service_name=netdata --action="restart"
fi

# Update default dashboard for NetData (source: https://grafana.com/grafana/dashboards/2701)
# Remove new lines
tr -d '\n' < ../conf/netdata_dashboard.json  > dashboard.json
# Fill the template with the defined data source
sed -i 's/${DS_CENTCOM-INFLUXDB}/InfluxDB/g' dashboard.json
# Escape the dashboard definition for MySQL query
dashboard=$(cat dashboard.json)
printf -v escaped_dashboard "%q" "$dashboard"
# Import dashboard into MySQL
ynh_mysql_connect_as --user=$db_user --password=$db_pwd --database=$db_name <<<  "UPDATE dashboard set data=\"$escaped_dashboard\" WHERE id=99999;"
# Insert dashboard version if non existent (for downward compatibility)
ynh_mysql_connect_as --user=$db_user --password=$db_pwd --database=$db_name <<<  "INSERT INTO  dashboard_version (id, dashboard_id, parent_version, restored_from, version, created, created_by, message, data) VALUES (99999, 99999, 0, 0, 1, '2020-05-16 14:36:50', 1, 'YunoHost installer', \"$escaped_dashboard\");" > /dev/null 2>&1 || true

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add influxdb --description="open source time series database" --log="/var/log/grafana/grafana.log"
yunohost service add grafana-server --description="open source analytics and monitoring solution" --log="/var/log/grafana/grafana.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Restarting a systemd service..." --weight=2

ynh_systemd_action --service_name=grafana-server --action="restart" --log_path="/var/log/grafana/grafana.log" --line_match="HTTP Server Listen" --timeout=600

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
